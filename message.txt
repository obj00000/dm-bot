import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import os

intents = discord.Intents.default()
intents.message_content = True
intents.members = True
intents.presences = True

bot = commands.Bot(command_prefix="!", intents=intents)

TOKEN = os.getenv("DISCORD_BOT_TOKEN")  # Set this in Replit Secrets

# Helper to check if user is admin
def is_admin(interaction: discord.Interaction):
    return interaction.user.guild_permissions.administrator

# Confirm/Cancel button view
class ConfirmView(discord.ui.View):
    def __init__(self, confirm_callback):
        super().__init__(timeout=60)
        self.confirm_callback = confirm_callback

    @discord.ui.button(label="‚úÖ Confirm", style=discord.ButtonStyle.success)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.confirm_callback()
        await interaction.response.edit_message(content="‚úÖ Message sent.", view=None)
        self.stop()

    @discord.ui.button(label="‚ùå Cancel", style=discord.ButtonStyle.danger)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.edit_message(content="‚ùå Cancelled.", view=None)
        self.stop()

@bot.event
async def on_ready():
    await bot.tree.sync()
    print(f"‚úÖ Logged in as {bot.user} (ID: {bot.user.id})")

# /dmmembers command
@bot.tree.command(name="dmmembers", description="DM a specific member")
@app_commands.describe(member="Select a member to DM")
async def dmmembers(interaction: discord.Interaction, member: discord.Member):
    if not is_admin(interaction):
        await interaction.response.send_message("‚ùå Only administrators can use this command.", ephemeral=True)
        return

    await interaction.response.send_message("‚úâÔ∏è Please type the message to send:", ephemeral=True)

    def check(m):
        return m.author == interaction.user and m.channel == interaction.channel

    try:
        msg = await bot.wait_for("message", check=check, timeout=60)
    except asyncio.TimeoutError:
        await interaction.followup.send("‚è±Ô∏è Timed out. Please try again.", ephemeral=True)
        return

    embed = discord.Embed(title="Message Preview", description=msg.content, color=discord.Color.blue())

    async def send_dm():
        try:
            await member.send(msg.content)
        except Exception as e:
            await interaction.followup.send(f"‚ùå Failed to DM: {e}", ephemeral=True)

    view = ConfirmView(send_dm)
    await interaction.followup.send("‚úÖ Confirm to send the message:", embed=embed, view=view, ephemeral=True)

# /dmrole command with live counter
@bot.tree.command(name="dmrole", description="DM all members with a specific role")
@app_commands.describe(role="Select a role")
async def dmrole(interaction: discord.Interaction, role: discord.Role):
    if not is_admin(interaction):
        await interaction.response.send_message("‚ùå Only administrators can use this command.", ephemeral=True)
        return

    await interaction.response.send_message("‚úâÔ∏è Please type the message to send to this role:", ephemeral=True)

    def check(m):
        return m.author == interaction.user and m.channel == interaction.channel

    try:
        msg = await bot.wait_for("message", check=check, timeout=60)
    except asyncio.TimeoutError:
        await interaction.followup.send("‚è±Ô∏è Timed out. Please try again.", ephemeral=True)
        return

    embed = discord.Embed(title="Message Preview", description=msg.content, color=discord.Color.green())

    async def send_role_dms():
        members = [m for m in role.members if not m.bot]
        total = len(members)

        if total == 0:
            await interaction.followup.send("‚ö†Ô∏è No members found in that role.", ephemeral=True)
            return

        # Initial status message
        status_message = await interaction.followup.send(f"üì§ Sending messages... (0/{total})", ephemeral=True)

        count = 0
        for member in members:
            try:
                await member.send(msg.content)
                count += 1
            except:
                pass

            await status_message.edit(content=f"üì§ Sending messages... ({count}/{total})")
            await asyncio.sleep(1)

        await status_message.edit(content=f"‚úÖ Sent message to **{count}** members with role `{role.name}`.")

    view = ConfirmView(send_role_dms)
    await interaction.followup.send("‚úÖ Confirm to send the message to all role members:", embed=embed, view=view, ephemeral=True)

bot.run(TOKEN)